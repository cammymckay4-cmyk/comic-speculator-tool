Specification Document

Project: ComicScoutUK
Version: 1.0 (Refactor)
Purpose: To provide a technical blueprint for refactoring the existing repository to meet the PRD requirements.
________________________________________
1. System Architecture
•	The system will be a decoupled architecture.
•	Backend: A REST API built with TypeScript and Node.js. It will handle all business logic, database interaction, and API calls. All responses will be in JSON format.
•	Database: The existing Supabase (PostgreSQL) database will be migrated and updated to the new schema. All interaction will be managed through the supabase-js client.
•	Frontend: Can be any client that consumes the REST API. A basic placeholder may be created for testing, but the primary frontend will be the user's custom-built React application.
•	External APIs:
o	eBay API: For live and sold listing data.
o	GoCollect API: For Fair Market Value (FMV) data.
o	Resend API: For transactional emails (e.g., password resets, alerts).
________________________________________
2. Core Refactoring Phases
1.	Analysis & Cleanup: The automated agent will first analyze the repo, update the README.md, and remove obsolete planning files.
2.	Database Migration: A migration script will be generated and executed to transform the existing Supabase schema to the target schema defined below. This is the highest priority.
3.	Incremental Refactoring: Existing components (eBay clients, UI elements) will be modified and enhanced feature-by-feature to align with this specification.
________________________________________
3. Data Models (Target Schema)
•	Users: user_id, email, password_hash, subscription_tier, profile_is_public
•	Comics: comic_id, title, issue_number, publisher, series_id, cover_image_url
•	User_Collection: entry_id, user_id, comic_id, purchase_price, grade, grader, user_submitted_image_url
•	Wishlist_Items: want_id, user_id, comic_id, min_grade, must_be_graded, grader_preference
•	Alert_Settings: setting_id, user_id, want_id (nullable for global), alert_type, is_active, threshold
•	Trophies: trophy_id, name, description, icon_url, tier (e.g., 'Gold')
•	User_Trophies: user_trophy_id, user_id, trophy_id, earned_date
________________________________________
4. Backend Process Specifications
•	The Scouting Engine:
o	A scheduled task (cron job) running at a configurable interval (e.g., 15 minutes).
o	Logic: Fetches all active Wishlist_Items -> Queries eBay API for new listings -> Calls Matching Logic -> If match, calls Alert Generation Logic.
o	It will maintain a table of tracked eBay listing IDs to prevent duplicate notifications.
•	Deal Scoring Algorithm:
o	A function calculateDealScore(ebay_listing) will be implemented.
o	Steps: 1. Get FMV from GoCollect API for the comic/grade. 2. Calculate score: score = FMV - ebay_listing.price. 3. The API endpoint for the 'Scout Results' page will use this score to sort the listings.
•	Gamification Engine:
o	An event-driven system. User actions (e.g., adding a comic, completing a goal) will trigger a checkAchievements(user_id) function.
o	This function will evaluate the user's current state against the rules defined for all Trophies.
________________________________________
5. API Endpoints (Illustrative)
The backend will expose a series of RESTful endpoints.
•	POST /api/auth/register
•	GET /api/collection/{user_id}
•	POST /api/wishlist
•	GET /api/scout/{want_id} (Returns the live, ranked deals for the Scout Results page)
•	GET /api/dashboard/{user_id} (Returns all data needed for the Speculator Dashboard)
•	GET /api/lcs?lat={lat}&lon={lon} (Returns Local Comic Shops near a location)



